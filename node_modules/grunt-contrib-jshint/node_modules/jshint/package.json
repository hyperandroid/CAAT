{
  "name": "jshint",
  "version": "1.0.0",
  "homepage": "http://jshint.com/",
  "description": "Static analysis tool for JavaScript",
  "author": {
    "name": "Anton Kovalyov",
    "email": "anton@kovalyov.net",
    "url": "http://anton.kovalyov.net/"
  },
  "bin": {
    "jshint": "./bin/jshint"
  },
  "scripts": {
    "test": "node ./make.js test",
    "lint": "node ./make.js lint"
  },
  "main": "./src/stable/jshint.js",
  "dependencies": {
    "esprima": "https://github.com/ariya/esprima/tarball/master",
    "shelljs": "*",
    "underscore": "*",
    "peakle": "*",
    "cli": "0.4.3",
    "minimatch": "0.x.x"
  },
  "devDependencies": {
    "jshint": "*",
    "shelljs": "*",
    "browserify": "*",
    "coveraje": "*",
    "nodeunit": "*",
    "sinon": "*"
  },
  "preferGlobal": true,
  "readme": "JSHint, A Static Code Analysis Tool for JavaScript\n==================================================\n\nJSHint is a community-driven tool to detect errors and potential problems in\nJavaScript code and to enforce your team's coding conventions. We made JSHint\nvery flexible so you can easily adjust it to your particular coding guidelines\nand the environment you expect your code to execute in.\n\nOur goal is to help JavaScript developers write complex programs without\nworrying about typos and language gotchas.\n\nWe believe that static code analysis programs—as well as other code quality\ntools—are important and beneficial to the JavaScript community and, thus,\nshould not alienate their users.\n\nFor general usage information, visit our website:\n[http://jshint.com/](http://jshint.com/).\n\nJSHint Fundraiser / Bug Bounties\n--------------------------------\n\nWe're [running a fundraiser](https://www.bountysource.com/#fundraisers/91-jshint)\nfor JSHint! If JSHint helps you in your day-to-day development, please consider\ndonating.  All money raised on this page will be used as monetary rewards for\nfixing JSHint bugs and implementing new features. Our hope is to introduce more\ndevelopers to JSHint hacking and boost its development.\n\n**Rules**:\n\n1. All funds (aside from fees) will be used only to fund bounties.\n2. If core team ends up fixing bounty bugs, the reward will be donated to the Electronic Frontier Foundation.\n3. Before marking bugs as fixed, all patches must be reviewed by a core team member.\n\nThanks!\n\nReporting a bug\n---------------\n\nTo report a bug simply create a\n[new GitHub Issue](https://github.com/jshint/jshint/issues/new) and describe\nyour problem or suggestion. We welcome all kind of feedback regarding\nJSHint including but not limited to:\n\n * When JSHint doesn't work as expected\n * When JSHint complains about valid JavaScript code that works in all browsers\n * When you simply want a new option or feature\n\nBefore reporting a bug look around to see if there are any open or closed tickets\nthat cover your issue. And remember the wisdom: pull request > bug report > tweet.\n\nInstallation\n------------\n\nYou can install JSHint via NPM:\n\n\tnpm install jshint -g\n\nWe also provide platform wrappers for Rhino, JavaScriptCore and Windows Script\nHost. To use them, clone this repo and run our build command:\n\n\tnode make.js\n\nUsage\n-----\n\n    jshint -h\n\nYou can also require JSHint itself as a module.\n\n    var jshint = require('jshint');\n\nNote: If you are using npm v1.x be sure to install jshint locally (without the -g\nflag) or link it globally.\n\nCustom Reporters\n----------------\n\nSpecify a custom reporter module (see example/reporter.js).\n\n    --reporter path/to/reporter.js\n\nUse a jslint compatible xml reporter.\n\n    --jslint-reporter\n\nShow additional non-error data generated by jshint (unused globals etc).\n\n    --show-non-errors\n\nConfiguration Options\n---------------------\n\n**Note:** This behavior described below is very different from versions\nprior to `0.6`.\n\nThe CLI uses the default options that come with JSHint. Only one extra\noption is unique to the CLI version of JSHint: `globals` allows you to\ndefine an object of globals that get ignored for every file.\n\nTo have your own configuration apply, there are several methods you can\nuse:\n\n### Specify Manually\n\nSetting the `--config=/path/to/your/config` command line option to specify\nyour own configuration file outside of the directory tree for your project.\n\n### Within your Project's Directory Tree\n\nWhen the CLI is called, and a configuration file isn't specified already,\n`node-jshint` will attempt to locate one for you starting in `pwd`. (or\n\"present working directory\") If this does not yield a `.jshintrc` file,\nit will move one level up (`..`) the directory tree all the way up to\nthe filesystem root. If a file is found, it stops immediately and uses\nthat set of configuration.\n\nThis setup allows you to set up **one** configuration file for your entire\nproject. (place it in the root folder) As long as you run `jshint` from\nanywhere within your project directory tree, the same configuration file\nwill be used.\n\n### Home Directory\n\nIf all the methods above do not yield a `.jshintrc` to use, the last place\nthat will be checked is your user's `$HOME` directory.\n\n## File Extensions\n\nDefault extension for files is \".js\". If you want to use JSHint with other\nfile extensions (.json), you need to pass this extra extension as an\noption:\n\n    --extra-ext .json\n\n## Ignoring Files and Directories\n\nIf there is a .jshintignore file in your project's directory tree, (also\nprovided you run `jshint` from within your project's directory) then any\ndirectories or files specified will be skipped over. (behaves just like\na `.gitignore` file)\n\n**Note:** Pattern matching uses minimatch, with the nocase\n[option](https://github.com/isaacs/minimatch). When there is no match,\nit performs a left side match (when no forward slashes present and path\nis a directory).\n\nUsing JSHint as a library\n-------------------------\n\nIt is easy to use JSHint as a JavaScript library. Just install the package\nwith NPM and, in your code, import a global `JSHINT` function:\n\n    var JSHINT = require(\"jshint\").JSHINT;\n\nThis function takes two parameters. The first parameter is either a string\nor an array of strings. If it is a string, it will be split on '\\n' or\n'\\r'. If it is an array of strings, it is assumed that each string\nrepresents one line. The source can be a JavaScript text or a JSON text.\n\nThe second parameter is an optional object of options which control the\noperation of JSHINT. Most of the options are booleans: they are all\noptional and have a default value of false.\n\nThe third parameter is an object of global variables, with keys as names\nand a boolean value to determine if they are assignable.\n\nIf it checks out, JSHINT returns true. Otherwise, it returns false.\n\nIf false, you can inspect JSHINT.errors to find out the problems.\nJSHINT.errors is an array of objects containing these members:\n\n    {\n      line      : The line (relative to 1) at which the lint was found\n      character : The character (relative to 1) at which the lint was found\n      reason    : The problem\n      evidence  : The text line in which the problem occured\n      scope     : The scope of the problem.\n      raw       : The raw message before the details were inserted\n      a         : The first detail\n      b         : The second detail\n      c         : The third detail\n      d         : The fourth detail\n    }\n\nIf a fatal error was found, a null will be the last element of the\nJSHINT.errors array.\n\nYou can request a data structure which contains JSHint's results.\n\n    var myData = JSHINT.data();\n\nIt returns a structure with this form:\n\n    {\n      errors: [\n        {\n          line       : NUMBER,\n          character  : NUMBER,\n          reason     : STRING,\n          evidence   : STRING\n        }\n      ],\n        functions: [\n        name         : STRING,\n        line         : NUMBER,\n        character    : NUMBER,\n        last         : NUMBER,\n        lastcharacter: NUMBER,\n        param        : [ STRING ],\n        closure      : [ STRING ],\n        var          : [ STRING ],\n        exception    : [ STRING ],\n        outer        : [ STRING ],\n        unused       : [ STRING ],\n        global       : [ STRING ],\n        label        : [ STRING ]\n      ],\n      globals: [\n        STRING\n      ],\n      member: {\n        STRING: NUMBER\n      },\n      unused: [\n        {\n          name       : STRING,\n          line       : NUMBER\n        }\n      ],\n      implieds: [\n        {\n          name: STRING,\n          line: NUMBER\n        }\n      ],\n      urls: [\n        STRING\n      ],\n      json: BOOLEAN\n    }\n\nEmpty array will not be included.\n\n\nFAQ\n---\n\n#### How do I turn off \"mixed tabs and spaces\" warning?\n\nIf you're using so-called [smart tabs](http://www.emacswiki.org/SmartTabs)\nthen we have an option `smarttabs` for you. Otherwise, your solution is to\nrun JSHint with a custom reporter that discards any warnings you don't like.\nFor example, this [example reporter](https://gist.github.com/3885619)\ndiscards all warnings about mixed tabs and spaces.\n\nContributing\n------------\n\nLook for a file named `CONTRIBUTING.md` in this repository. It contains our\ncontributing guidelines. We also have\n[a mailing list](http://groups.google.com/group/jshint/).\n\nLicense\n-------\n\nJSHint is distributed under the MIT License. One file and one file only\n(src/stable/jshint.js) is distributed under the slightly modified MIT License.\n\nAttribution\n-----------\n\nCore Team members:\n\n * [Anton Kovalyov](http://anton.kovalyov.net/) ([@valueof](http://twitter.com/valueof))\n * [Wolfgang Kluge](http://klugesoftware.de/) ([blog](http://gehirnwindung.de/))\n * [Josh Perez](http://www.goatslacker.com/) ([@goatslacker](http://twitter.com/goatslacker))\n * [Brent Lintner](http://brentlintner.heroku.com/) ([@brentlintner](http://twitter.com/brentlintner))\n\nMaintainer: Anton Kovalyov\n\nThank you!\n----------\n\nWe really appreciate all kind of feedback and contributions. Thanks for using and supporting JSHint!\n",
  "readmeFilename": "README.md",
  "_id": "jshint@1.0.0",
  "dist": {
    "shasum": "52f1be8147ff120e8c73bfb6c5838ff1e309d431"
  },
  "_from": "jshint@~1.0.0",
  "_resolved": "https://registry.npmjs.org/jshint/-/jshint-1.0.0.tgz"
}
